<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--1. 扫描包-->
    <context:component-scan base-package="com.itheima"/>

    <context:property-placeholder location="db.properties"/>

    <!--创建数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!--2. 配置MapperScannerConfigurer-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itheima.dao"/>
    </bean>

    <!--3. 配置SqlSessionFactoryBean-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--4. 配置事务-->

    <!--
        4.1 配置事务的管理员
            4.1.1 到底用哪个事务管理员，取决于dao层使用的是什么计数
            4.1.2 如果使用的是mybatis， 那么管理员就是DataSourceTransactionManager
            4.1.3 如果使用的是Hibernate，那么管理员就是HibernateTransactionManager

            4.1.4 管理员的工作就是：开启事务，提交事务，回滚事务！
                开启事务： conn.setAutoCommit(false);
                提交事务： conn.commit();
                回滚事务： conn.rollback();
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--4.2 配置事务-->
    <!--
        4.2.1 配置事务的规则
            tx:advice: 用来配置事务的规则
                id : 唯一标识符
                transaction-manager: 事务的管理员是谁 , 如果事务管理员的id值是：transactionManager 那么可以不写这个属性
                                因为默认就是按照这个名字去找管理员的。
           tx:attributes ： 用来配置事务的规则
                tx:method： 配置具体的某一个方法、某一类方法、所有方法，的事务规则是怎样的！
                    name： 方法名，
                        可以是具体的名字 ==== addUser
                        可以是一类名字 ==== add*
                        可以是任意名字 ==== *
                    isolation： 事务的隔离级别
                    timeout： 超时时间， -1 表示永不超时。
                    read-only ： 是否是只读的事务，如果是true， 即表示事务里面只能执行读取的操作。 如果是false即表示可以做读写操作
                    propagation ： 事务的传播行为
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="transfer" isolation="DEFAULT" timeout="-1" read-only="false" propagation="REQUIRED"/>
            <tx:method name="add*" isolation="DEFAULT" timeout="-1" read-only="false" propagation="REQUIRED"/>
            <tx:method name="update*" isolation="DEFAULT" timeout="-1" read-only="false" propagation="REQUIRED"/>
            <tx:method name="delete*" isolation="DEFAULT" timeout="-1" read-only="false" propagation="REQUIRED"/>
            <tx:method name="find*" isolation="DEFAULT" timeout="-1" read-only="true" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--4.2.2 配置谁想用事务:: 用的还是AOP的思想来完成事务的配置-->
    <aop:config>
        <!--
            aop:advisor： 用来配置事务的标签
                advice-ref ： 事务的规则是哪个
                pointcut ： 切入点，就是具体什么方法想用上事务的增强！
        -->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.itheima..*.*(..))"/>
    </aop:config>

</beans>